{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9cd1abe86c9f3b2db2cf3e7518b80442",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<voting-card title=\"Segue o relator?\" [votes]=\"votes\"></voting-card>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "votes",
                    "defaultValue": "[\n    {\n      option: 'Sim',\n      count: 8,\n    },\n    {\n      option: 'Não',\n      count: 12,\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template:\n    '<voting-card title=\"Segue o relator?\" [votes]=\"votes\"></voting-card>',\n})\nexport class AppComponent {\n  votes = [\n    {\n      option: 'Sim',\n      count: 8,\n    },\n    {\n      option: 'Não',\n      count: 12,\n    },\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BoothComponent",
            "id": "component-BoothComponent-a2f054f4d42c49e591722fd5ea3a4290",
            "file": "src/app/booth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "booth",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  type=\"button\"\n  *ngFor=\"let option of options; index as i\"\n  [ngClass]=\"[\n    'transition-all bg-gray-800 hover:bg-gray-900 text-gray-200 rounded p-2',\n    i > 0 ? 'ml-3' : ''\n  ]\"\n  (click)=\"vote.emit(option)\"\n>\n  {{ option }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "line": 20,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "vote",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'booth',\n  template: `\n    <button\n      type=\"button\"\n      *ngFor=\"let option of options; index as i\"\n      [ngClass]=\"[\n        'transition-all bg-gray-800 hover:bg-gray-900 text-gray-200 rounded p-2',\n        i > 0 ? 'ml-3' : ''\n      ]\"\n      (click)=\"vote.emit(option)\"\n    >\n      {{ option }}\n    </button>\n  `,\n})\nexport class BoothComponent {\n  @Input() options!: string[];\n\n  @Output() vote = new EventEmitter<string>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ResultComponent",
            "id": "component-ResultComponent-f87584b79267754dd098e943ddc3d7e1",
            "file": "src/app/result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "result",
            "styleUrls": [],
            "styles": [],
            "template": "<ol [ngClass]=\"['list-decimal text-gray-200', className]\">\n  <li *ngFor=\"let vote of parsedVotes\">\n    {{ vote.option }} - {{ vote.count }} votos ({{ vote.rate }}%)\n  </li>\n</ol>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "className",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "votes",
                    "line": 16,
                    "type": "Vote[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Vote } from '../types/Vote';\n\n@Component({\n  selector: 'result',\n  template: `\n    <ol [ngClass]=\"['list-decimal text-gray-200', className]\">\n      <li *ngFor=\"let vote of parsedVotes\">\n        {{ vote.option }} - {{ vote.count }} votos ({{ vote.rate }}%)\n      </li>\n    </ol>\n  `,\n})\nexport class ResultComponent {\n  @Input() votes!: Vote[];\n  @Input() className = '';\n\n  get parsedVotes() {\n    const totalVotes = this.votes.reduce(\n      (totalVotes, vote) => totalVotes + vote.count,\n      0\n    );\n    const orderedVotes = [...this.votes].sort((a, b) => b.count - a.count);\n    const parsedVotes = orderedVotes.map((vote) => ({\n      ...vote,\n      rate: Math.round((vote.count * 100) / totalVotes),\n    }));\n\n    return parsedVotes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "parsedVotes": {
                    "name": "parsedVotes",
                    "getSignature": {
                        "name": "parsedVotes",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            }
        },
        {
            "name": "VotingCardComponent",
            "id": "component-VotingCardComponent-c450b11dce61fd692b1dcf6c066901a6",
            "file": "src/app/votingCard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "voting-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"bg-gray-600 max-w-max p-6 flex flex-col rounded\">\n  <h1 class=\"font-bold text-2xl mb-4 text-gray-100\">{{ title }}</h1>\n\n  <div class=\"flex justify-center\">\n    <booth\n      *ngIf=\"state === 'open'\"\n      [options]=\"options\"\n      (vote)=\"handleVote($event)\"\n    ></booth>\n    <result *ngIf=\"state === 'closed'\" [votes]=\"votes\"></result>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "defaultValue": "'open'",
                    "line": 27,
                    "type": "VotingStates"
                },
                {
                    "name": "title",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "votes",
                    "line": 25,
                    "type": "Vote[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleVote",
                    "args": [
                        {
                            "name": "option",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementCountOn",
                    "args": [
                        {
                            "name": "option",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Vote } from '../types/Vote';\n\ntype VotingStates = 'open' | 'closed';\n\n@Component({\n  selector: 'voting-card',\n  template: `\n    <div class=\"bg-gray-600 max-w-max p-6 flex flex-col rounded\">\n      <h1 class=\"font-bold text-2xl mb-4 text-gray-100\">{{ title }}</h1>\n\n      <div class=\"flex justify-center\">\n        <booth\n          *ngIf=\"state === 'open'\"\n          [options]=\"options\"\n          (vote)=\"handleVote($event)\"\n        ></booth>\n        <result *ngIf=\"state === 'closed'\" [votes]=\"votes\"></result>\n      </div>\n    </div>\n  `,\n})\nexport class VotingCardComponent {\n  @Input() votes!: Vote[];\n  @Input() title!: string;\n  @Input() state: VotingStates = 'open';\n\n  get options() {\n    return this.votes.map((vote) => vote.option);\n  }\n\n  incrementCountOn(option: string) {\n    this.votes = this.votes.map((vote) => ({\n      ...vote,\n      count: vote.option === option ? vote.count + 1 : vote.count,\n    }));\n  }\n\n  handleVote(option: string) {\n    this.state = 'closed';\n    this.incrementCountOn(option);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BoothComponent"
                        },
                        {
                            "name": "ResultComponent"
                        },
                        {
                            "name": "VotingCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "center",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/decorators/center.ts",
                "type": "",
                "defaultValue": "(story: () => StoryFnAngularReturnType) => ({\n  ...story(),\n  template: `<section class=\"flex justify-center\">${\n    story().template\n  }</section>`,\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "FirstExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Booth.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FirstVote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FirstVoting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SecondExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Booth.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SecondVote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SecondVoting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Booth.stories.ts",
                "type": "Story<BoothComponent>",
                "defaultValue": "(args: BoothComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "Story<ResultComponent>",
                "defaultValue": "(args: ResultComponent) => ({\n  props: {\n    ...args,\n    className: 'text-gray-900',\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "Story<VotingCardComponent>",
                "defaultValue": "(args: VotingCardComponent) => ({\n  props: args,\n  moduleMetadata: {\n    declarations: [BoothComponent, ResultComponent],\n  },\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Vote",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/types/Vote.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "VotingStates",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"open\" | \"closed\"",
                "file": "src/app/votingCard.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/decorators/center.ts": [
                {
                    "name": "center",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/decorators/center.ts",
                    "type": "",
                    "defaultValue": "(story: () => StoryFnAngularReturnType) => ({\n  ...story(),\n  template: `<section class=\"flex justify-center\">${\n    story().template\n  }</section>`,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Booth.stories.ts": [
                {
                    "name": "FirstExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Booth.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Booth.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Booth.stories.ts",
                    "type": "Story<BoothComponent>",
                    "defaultValue": "(args: BoothComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Result.stories.ts": [
                {
                    "name": "FirstVote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondVote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "Story<ResultComponent>",
                    "defaultValue": "(args: ResultComponent) => ({\n  props: {\n    ...args,\n    className: 'text-gray-900',\n  },\n})"
                }
            ],
            "src/stories/VotingCard.stories.ts": [
                {
                    "name": "FirstVoting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondVoting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "Story<VotingCardComponent>",
                    "defaultValue": "(args: VotingCardComponent) => ({\n  props: args,\n  moduleMetadata: {\n    declarations: [BoothComponent, ResultComponent],\n  },\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/types/Vote.ts": [
                {
                    "name": "Vote",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/types/Vote.ts",
                    "description": "",
                    "kind": 165
                }
            ],
            "src/app/votingCard.component.ts": [
                {
                    "name": "VotingStates",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"open\" | \"closed\"",
                    "file": "src/app/votingCard.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/booth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoothComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/votingCard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VotingCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Booth.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FirstExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Booth.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Booth.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FirstVote",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondVote",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FirstVoting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondVoting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/decorators/center.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "center",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}